{"version":3,"sources":["components/Container/index.js","components/Row/index.js","components/Col/index.js","components/TeamPrinter/teamprinter.js","components/SortButton/index.js","pages/index.js","components/Navbar/index.js","components/Footer/index.js","components/Wrapper/index.js","App.js","serviceWorker.js","index.js"],"names":["Container","props","className","fluid","Row","Col","size","split","map","join","TeamPrinter","employees","employee","name","title","SortButton","onClick","text","sortAlphabetically","array","sort","a","b","sortReverse","Index","state","Employees","sortState","reverseSort","event","setState","filterArray","filtered","x","length","includes","push","style","marginTop","id","this","Component","Navbar","to","Footer","Wrapper","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.78cf2b7b.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Container(props) {\n  return <div className={`container${props.fluid ? \"-fluid\" : \"\"}`} {...props} />;\n}\n\nexport default Container;\n","import React from \"react\";\n\nfunction Row(props) {\n  return <div className={`row${props.fluid ? \"-fluid\" : \"\"}`} {...props} />;\n}\n\nexport default Row;\n","import React from \"react\";\n\nfunction Col(props) {\n  const size = props.size.split(\" \").map(size => \"col-\" + size).join(\" \");\n\n  return <div className={size} {...props} />;\n}\n\nexport default Col;\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction TeamPrinter(props) {\r\n  return (\r\n    <div>\r\n      {props.employees.map(employee => (\r\n        <p className=\"employee-card\">\r\n          <span className=\"employee-name\">{employee.name}</span>  \r\n          <span className=\"employee-title\"> {employee.title}</span>\r\n        </p>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TeamPrinter;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction SortButton(props) {\r\n  return (\r\n    <button onClick={props.onClick} className={`card-btn`}>{props.text}</button>\r\n  );\r\n}\r\n\r\nexport default SortButton;\r\n","import React, { Component } from \"react\";\r\nimport Container from \"../components/Container\";\r\nimport Row from \"../components/Row\";\r\nimport Col from \"../components/Col\";\r\nimport TeamPrinter from \"../components/TeamPrinter/teamprinter\";\r\nimport Employees from \"../employees.json\";\r\nimport SortButton from \"../components/SortButton\";\r\n\r\nfunction sortAlphabetically(array) {\r\n  return(array.sort((a, b) => (a.name > b.name) ? 1 : -1))\r\n}\r\n\r\nfunction sortReverse(array) {\r\n  return(array.sort((a, b) => (b.name > a.name) ? 1 : -1))\r\n}\r\n\r\nclass Index extends Component {\r\n  state = {\r\n    employees: sortAlphabetically(Employees),\r\n    sortState: 1\r\n  };\r\n\r\n  reverseSort = event => {\r\n    if (this.state.sortState === 1) {\r\n      this.setState({\r\n        employees: sortReverse(this.state.employees),\r\n        sortState: 2\r\n      })  \r\n      return;\r\n    } else if (this.state.sortState === 2) {\r\n      this.setState({\r\n        employees: sortAlphabetically(this.state.employees),\r\n        sortState: 1\r\n      })\r\n    }\r\n  };\r\n\r\n  filterArray = (array, title) => {\r\n    let filtered = []\r\n    \r\n    for (let x=0; x < array.length; x++) {\r\n      if (array[x].title.includes(title)) {\r\n        filtered.push(array[x]);\r\n      }\r\n    }\r\n    \r\n    this.setState({\r\n      employees: filtered\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Container style={{ marginTop: 30 }}>\r\n          <Row>\r\n            <h1>Employees are listed below</h1>\r\n            <p>\r\n              To change employees, edit \"employees.json\" in the system files.\r\n              That may seem excessively complicated, but this program isn't intended for practical use.\r\n              It's just a demonstration. \r\n              I recommend using literally anything else to manage your team instead.\r\n            </p>\r\n            <p>Sorted alphabetically <span id=\"sort-identifier\">A-Z</span><SortButton text={\"Flip order\"} onClick={this.reverseSort} /> \r\n            <br />\r\n            <br />\r\n            Filter by job title: <SortButton text={\"Interns\"} onClick={() => this.filterArray(Employees, \"Intern\")} />\r\n            <SortButton text={\"Security\"} onClick={() => this.filterArray(Employees, \"Security\")} />\r\n            <SortButton text={\"Customer Service\"} onClick={() => this.filterArray(Employees, \"Customer\")} />\r\n            <SortButton text={\"HR\"} onClick={() => this.filterArray(Employees, \"HR\")} />\r\n            <SortButton text={\"Manager\"} onClick={() => this.filterArray(Employees, \"Manager\")} /></p>\r\n          </Row>\r\n          <Row style={{ marginTop: 50 }}>\r\n            <Col size=\"md-12\">\r\n              <TeamPrinter employees={this.state.employees} />\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n    )\r\n  };\r\n}\r\n\r\nexport default Index;","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"./style.css\";\n\n// Depending on the current path, this component sets the \"active\" class on the appropriate navigation link item\nfunction Navbar() {\n  return (\n    <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n      <Link className=\"navbar-brand\" to=\"/\">\n        Employee Directory\n      </Link>\n    </nav>\n  );\n}\n\nexport default Navbar;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Footer() {\n  return (\n    <footer className=\"footer\">\n      <span>Employee Directory - NJE 2020</span>\n    </footer>\n  );\n}\n\nexport default Footer;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <main className=\"wrapper\" {...props} />;\n}\n\nexport default Wrapper;\n","import React from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport Index from \"./pages/index\";\nimport Navbar from \"./components/Navbar\";\nimport Footer from \"./components/Footer\";\nimport Wrapper from \"./components/Wrapper\";\n\nfunction App() {\n  return (\n    <Router>\n      <div>\n        <Navbar />\n        <Wrapper>\n          <Route exact path=\"/\" component={Index} />\n        </Wrapper>\n        <Footer />\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}